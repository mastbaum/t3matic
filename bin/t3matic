#!/usr/bin/env python
'''t3matic: "Making the most of someone else's cluster"

A. Mastbaum <mastbaum@hep.upenn.edu>, 2012-2013

t3matic runs rat simulations on a Condor cluster. it keeps a given number of
jobs in the system at any time, roughly in proportion to the rates
associated with user-specified signals and backgrounds.
'''

import sys
import time
import datetime
from t3matic.condor import RATCondor
from t3matic.sge import RATGE
from t3matic.utils import read_config_db, write_unpause_db
from t3matic import cluster_types

sys.path.insert(0, '.')

def main(type, host, interval=600):
    '''Load a configuration and fill the queue on a fixed interval.

    :param type: Queue type ('ge' or 'condor')
    :param host: Hostname of master
    :param interval: Interval with which to check and top off queue
    '''
    from t3matic.utils import email
    import settings

    if type == 'ge':
        cluster = cluster_types[type](host, settings.queue)
    elif type == 'condor':
        cluster = cluster_types[type](host)
    else:
        raise Exception('Unknown cluster type "%s"' % type)

    paused = False
    while True:
        config = read_config_db(settings.host, settings.dbname,
                                settings.username, settings.password)

        user = settings.user

        while paused:
            config = read_config_db(settings.host, settings.dbname,
                                    settings.username, settings.password)
            if config['restart']:
                write_unpause_db(settings.host, settings.dbname,
                                 settings.username, settings.password)
                paused = False
                break

            time.sleep(30)
            

        # stop everything if our jobs are taking a long time
        # since something is probably broken
        long_job_time = config['long_job_time']
        long_job_count = config['long_job_count']
        job_durations = cluster.job_durations(user=user, min_time=long_job_time)
        if len(job_durations) > long_job_count:
            error_message = 't3matic: shutting down due to long jobs: %s' % job_durations
            print error_message
            cluster.rm(settings.user_short)
            try:
                email(settings.notify_list, 't3matic error', 't3matic shutdown: long jobs: %s' % job_durations)
            except NameError:
                pass
            paused = True

        target_queue_slots = config['target_queue_slots']
        output_location = config['output_location']
        signals = config['signals']
        exe_dir = settings.exe_dir
        initial_dir = settings.initial_dir

        jobs_added = cluster.fill_queue(user, signals, target_queue_slots,
                                        initial_dir, exe_dir, output_location)

        print datetime.datetime.fromtimestamp(time.time())
        print 'added %i jobs' % jobs_added
        print 'status:', cluster.job_type_count(user=user)

        time.sleep(interval)


if __name__ == '__main__':
    try:
        type = sys.argv[1]
        host = sys.argv[2]
    except IndexError:
        print 'Usage: %s [queue type] [host] [interval]' % sys.argv[0]
        sys.exit(1)

    interval = float(sys.argv[3] if len(sys.argv)>3 else 120)

    main(type, host, interval=interval)

