#!/usr/bin/env python
'''Wrapper for submitting executables to Grid Engine.

Usage:

    $ ./q foo

Originally written by S. Seibert
Updated by A. Mastbaum <mastbaum@hep.upenn.edu>, 2/2013
'''

import os, time, sys, re

def QuoteForPOSIX(string):
    '''quote a string so it can be used as an argument in a  posix shell

       According to: http://www.unix.org/single_unix_specification/
          2.2.1 Escape Character (Backslash)

          A backslash that is not quoted shall preserve the literal value
          of the following character, with the exception of a <newline>.

          2.2.2 Single-Quotes

          Enclosing characters in single-quotes ( '' ) shall preserve
          the literal value of each character within the single-quotes.
          A single-quote cannot occur within single-quotes.
          
          http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/498202
    '''
    return "\\'".join(["'" + p + "'" for p in string.split("'")])


def gen_uuid():
    '''Generate unique universal identifier.
    
    For compatability with Python 2.3, using very crappy method that reads
    some bytes from /dev/urandom.'''
    block = file('/dev/urandom').read(6)
    return ''.join(['%x' % ord(b) for b in block])


def save_env(env_dir='~/.sge_env', extra={}):
    '''Store all of the current environment variables in a file in bash syntax.

    Filename is autogenerated with the current date, time, and a UUID.  env
    Returns name of environment file.'''
    env_dir = os.path.expanduser(env_dir)
    if not os.path.exists(env_dir):
        os.mkdir(env_dir)
    
    env_file = os.path.join(env_dir, time.strftime('%Y%m%d.%H%M') + '.' + gen_uuid())
    f = file(env_file, 'w')
    for k, v in os.environ.items() + extra.items():
        if k in ['HOSTNAME', 'DISPLAY']: continue
        f.write('export ' + k + '=' + QuoteForPOSIX(v) + '\n')
    return env_file


def main(argv):
    dirname = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0])))
    batch_script = os.path.join(dirname,'qbatch.scr')
    command = os.path.basename(argv[0])
    argv = argv[1:] # Prune off command name
    
    # Save environment to disk
    env_file = save_env(extra={'QCMD': ' '.join(argv)})
    env_dir = os.path.dirname(env_file)

    job_name = os.path.basename(argv[0])

    options = ['-N', job_name, '-p', '-1023']  # -1023 is minimum priority

    qcmd = 'qsub'
    qcmd_args = options + ['-o', env_dir, '-e', env_dir,  '-S', '/bin/bash', batch_script, env_file] + argv

    # Run appropriate sge command.  Command replaces this script in memory,
    # so no return after next line
    os.execvp(qcmd, [qcmd] + qcmd_args)
    

def help_batch():
    print 'Usage: %s command_name [command args]' % sys.argv[0]
    print '''  Submits a job which runs command_name to the queue.
  Automatically sets environment and working directory to current values.'''


if __name__ == '__main__':
    if len(sys.argv) < 2:
        help_batch()
    else:
        main(sys.argv)

